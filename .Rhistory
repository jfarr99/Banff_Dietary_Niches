# read in other metadata on samples --> 338 samples total, including horses, blanks, etc...
metadata <- read_csv("data/Supplementary File 1 - Fecal sample metadata.csv") %>%
dplyr::select(SampleID2 = `SampleID (lab)`, ID_Number, Date, Time, Season, General_Loc, Lat, Long, Species)
# load in our phyloseq object...
banff_diet <- readRDS("data/BNP_diet_local_global_20241101.rds")
# Load OTU table
otu_mat <- otu_table(banff_diet)
tax_mat_all <- read.csv("data/updated_TAXtable_BNP_JJF_20241203.csv")
rownames(tax_mat_all) <- tax_mat_all$identity
tax_mat_all <- tax_table(as.matrix(tax_mat_all))
# Load metadata
samples_df <- data.frame(sample_data(banff_diet)) %>%  # 261 samples that were sequences & included in run
mutate(SampleID2 = ifelse(Seq.date == "20240726", parse_number(SampleID), SampleID))
# read in other metadata on samples --> 338 samples total, including horses, blanks, etc...
metadata <- read_csv("data/Banff Metadata_Nov102024.csv") %>%
dplyr::select(SampleID2 = `SampleID (lab)`, ID_Number, Date, Time, Season, General_Loc, Lat, Long, Species)
meta <- merge(samples_df, metadata, by="SampleID2", all.x= TRUE) %>% dplyr::select(-SampleID2)
row.names(meta) <- meta$SampleID
table(meta$Species, meta$Season)
# Assign each object and create phyloseq
samples = sample_data(meta)
banff_diet <- phyloseq(otu_mat, tax_mat_all, samples)
# Save RDS (phyloseq object)
saveRDS(banff_diet, "banff_diet_phyloseq_Nov102024.rds")
# Load phyloseq object
physeq <- readRDS("banff_diet_phyloseq_Nov102024.rds")
# Take a look at the phlyoseq object
physeq
# Check number of samples, taxa etc.
nsamples(physeq)
ntaxa(physeq)
rank_names(physeq)
sample_names(physeq)[1:5] #displays first 5 sample names
sample_variables(physeq) # shows the colummn headers of the sample_data
otu_table(physeq)[1:5, 1:5] # shows first 5 rows and 5 columns of otu table
tax_table(physeq)[1:5, 1:5] # shows first 5 rows and 5 columns of taxonomy table
# remove all taxa with fewer than 1000 reads
taxa_total_count <- taxa_sums(physeq)
ntaxa(physeq)
#ntaxa(physeq_pruned) # now we only have 162 taxa total! Yaya! See Kartzinel et al. 2015 for rationale
nsamples(physeq)
sample_sums(physeq)
rm(banff_diet, otu_mat, tax_mat, samples_df, samples, meta, metadata, taxa_to_keep, taxa_total_count)
# Pre-processing the Data:Let's first look at a histogram of the distribution of read depths across samples
hist(sample_sums(physeq), main="Histogram of read depths across samples", xlab="sequencing depth", ylab="number of samples")
sample_sums(physeq) # no issues getting DNA reads from poop - nice!
# We need to remove samples which have a low sequencing depth: Let's look at the lowest read depth of a sample, and then remove samples with a read depth of less than 1000 reads, and then look at how many samples we have retained.
min(sample_sums(physeq)) #shows lowest number of reads for the samples
# First, we need to set a seed number to make our results reproducible to anyone else who may use our code
set.seed(12345)
# Rarefy samples. Note: The default parameters of rarefy will involve sampling with replacement, which is not appropriate here. So we set this to 'false' (F).
physeq_rarefy<-rarefy_even_depth(physeq, rngseed=T, replace=F)
# Double check how many samples and  taxa we now have, and also check that we don't have any zeros in our data (if we did we would have to prune these samples/taxa out)
nsamples(physeq_rarefy) #number of  samples
ntaxa(physeq_rarefy) #number of  taxa --> 624 after pruning
taxa_sums(physeq_rarefy)
min(sample_sums(physeq_rarefy)) #make sure there are no zeros in minimum read depth!
max(sample_sums(physeq_rarefy))
min(taxa_sums(physeq_rarefy)) #make sure there are no zeros in minimum read depth!
# If there are zero counts, you need to remove them:
physeq_rarefy <- prune_taxa(taxa_sums(physeq_rarefy) > 0, physeq_rarefy) #prune taxa to keep those taxa with a minimum read count of > zero i.e. one and above
# our full dataset (not RRA)
saveRDS(physeq_rarefy, "banff_diet_phyloseq_cleaned_Dec032024.rds")
rm(physeq, physeq_pruned, physeq_1000, physeq_1000_pruned)
# If you need to transform sample counts into relative read abundances (always check that this has done the correct transformation and not coverted to RRA across taxa rather than samples)
physeq_rarefy_rra <- transform_sample_counts(physeq_rarefy, function(x) x / sum(x))
sum(physeq_rarefy_rra@otu_table[,100]) # checking to make sure that RRA sums to 1 in a column (make sure this is the correct transformation)
saveRDS(physeq_rarefy_rra, "banff_diet_phyloseq_cleaned_Dec032024.rds")
tax <- data.frame(tax_table(physeq_rarefy_rra))
# how many plants ID'ed to different resolutions
table(is.na(tax$family_name))
table(is.na(tax$genus_name))
table(is.na(tax$species_name))
tax$bp_length <- str_length(tax$sequence)
summary(tax$bp_length)
table(tax$bp_length)
info <- read.csv("data/supplementary_sample_metadata_pipeline.csv")
meta <- sample_data(readRDS("banff_diet_phyloseq_cleaned_Dec032024.rds"))
sample_metadata <- left_join(info, meta)
write.csv(sample_metadata, "data/Supplementary File 1 - Fecal sample metadata")
otu <- otu_table(readRDS("data/banff_diet_phyloseq_cleaned_Dec032024.rds"))
otu <- otu_table(readRDS("banff_diet_phyloseq_cleaned_Dec032024.rds"))
write.csv(sample_metadata, "data/Supplementary File 1 - Fecal sample metadata.csv")
write.csv(otu, "data/Supplementary File 3 - OTU table.csv")
tax <- data.frame(tax_table(readRDS("banff_diet_phyloseq_cleaned_Dec032024.rds")))
table(is.na(tax$form))
write.csv(tax, "data/Supplementary File 4 - Tax table.csv")
physeq_rarefy_rra <- readRDS("banff_diet_phyloseq_cleaned_Dec032024.rds")
table(sample_data(physeq_rarefy_rra)$Species)
ggsave("Outputs/all_species_diets_noSeason_feb1662025.jpeg", width = 7.5, height = 5)
physeq_df <- psmelt(physeq_rarefy_rra) %>%
mutate(Sample_description = paste(Sample, Date, General_Loc, sep = ":")) %>%   # informative label we might use for plotting
# now paste together our family/genera/species
# mutate(species_name = ifelse(is.na(species_name), genus_name, species_name )) %>%
mutate(family_genus_species = paste(family_name, species_name, sep=":"),
family_genus = paste(family_name, genus_name, sep = ":")) %>%
mutate(Present = ifelse(Abundance > 0, 1, 0))# %>% # this is adding a binary presence/absence variable
#filter(Present == 1) # remove all "0" rows as# these are non-informative for everything we're trying to do here.
######
# check out the taxonomic resolution of our data!
families = physeq_df %>%
group_by(family_name) %>%
summarize(unique(family_name))
nrow(families) # 89 families!
genera = physeq_df %>%
group_by(genus_name) %>%
summarize(unique(genus_name))
nrow(genera) # representing 199 genera
spp = physeq_df %>%
group_by(species_name) %>%
summarize(unique(species_name))
nrow(spp) # 169 species
tax = physeq_df %>%
group_by(identity) %>%
summarize(unique(identity))
nrow(tax) # 402 unique taxa
rm(families, genera, spp)
# how many samples per species/season?
physeq_df_n <- physeq_df %>%
group_by(Species, Season) %>%
summarise(n = n_distinct(Sample))
physeq_df_n
rm(physeq_df_n, spp, tax)
tax_rra <- physeq_df %>%
group_by(identity, best_id) %>% # group by sample
summarise(RRA = sum(Abundance)/261)
tax_foo <- physeq_df %>%
group_by(identity, best_id) %>% # group by sample
summarise(FOO = sum(Present)/261)
# basic % summaries
perc_summaries <- physeq_df %>%
mutate(Season = if_else(Season == "Fall", "Winter", Season)) %>%
group_by(Species, Season) %>%
mutate(Seasonal_samples = n_distinct(Sample)) %>%
group_by(Species, Season, form) %>%
summarize(Proportion = sum(Abundance)/unique(Seasonal_samples)*100) # sum instead of mean?
# basic % summaries
perc_summaries <- physeq_df %>%
mutate(Season = if_else(Season == "Fall", "Winter", Season)) %>%
group_by(Species, Season) %>%
mutate(Seasonal_samples = n_distinct(Sample)) %>%
group_by(Species, Season, form) %>%
summarize(Proportion = sum(Abundance)/unique(Seasonal_samples)*100) # sum instead of mean?
let's make one of those cool figures that birch had!
```{r}
#Trying to make a SankeyDiagram - this is still janky
physeq_sankey_data <- physeq_df %>%
mutate(Season = if_else(Season == "Fall", "Winter", Season)) %>%
group_by(Species, Season) %>%
mutate(Seasonal_samples = n_distinct(Sample)) %>%
group_by(Species, Season, form) %>%
summarize(Proportion = sum(Abundance)/unique(Seasonal_samples)) # sum instead of mean?
physeq_sankey_PLOTdat <- physeq_sankey_data %>%
filter(Species != "Moose" & Species != "Deer" & Species != "Goat") %>%
mutate(form= if_else(is.na(form), "other", form))
physeq_sankey_PLOTdat$form = factor(physeq_sankey_PLOTdat$form, levels = c("grass", "non-grass graminoid", "forb",
"deciduous shrub/tree",
"coniferous shrub/tree"))
physeq_sankey_PLOTdat$Season = factor(physeq_sankey_PLOTdat$Season, levels = c("Winter", "Spring", "Summer"))
d
d
d
d
d
#Trying to make a SankeyDiagram - this is still janky
physeq_sankey_data <- physeq_df %>%
mutate(Season = if_else(Season == "Fall", "Winter", Season)) %>%
group_by(Species, Season) %>%
mutate(Seasonal_samples = n_distinct(Sample)) %>%
group_by(Species, Season, form) %>%
summarize(Proportion = sum(Abundance)/unique(Seasonal_samples)) # sum instead of mean?
physeq_sankey_PLOTdat <- physeq_sankey_data %>%
filter(Species != "Moose" & Species != "Deer" & Species != "Goat") %>%
mutate(form= if_else(is.na(form), "other", form))
physeq_sankey_PLOTdat$form = factor(physeq_sankey_PLOTdat$form, levels = c("grass", "non-grass graminoid", "forb",
"deciduous shrub/tree",
"coniferous shrub/tree"))
physeq_sankey_PLOTdat$Season = factor(physeq_sankey_PLOTdat$Season, levels = c("Winter", "Spring", "Summer"))
physeq_sankey_PLOTdat$Species = factor(physeq_sankey_PLOTdat$Species,
levels = c("Elk", "BighornSheep", "Bison"),
labels = c("Elk", "Bighorn Sheep", "Bison"))
ggplot(physeq_sankey_PLOTdat,
aes(axis1 = form, axis2 = Species, y = Proportion)) +
geom_alluvium(aes(fill = form), width = 1/10, color = "black", alpha = 0.8) +
geom_stratum(width = 1/10, aes(fill = form), color = "black") +
#  geom_text(stat = "stratum", infer.label = TRUE) +
scale_x_discrete(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(y = "Proportional Read Abundance (%)") +
facet_wrap(.~Season, nrow = 3,  strip.position = "right") +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
legend.position = "bo",
panel.grid.major = element_blank(),  # Remove major gridlines
panel.grid.minor = element_blank()
) +
scale_fill_manual(values = c("gold", "lightyellow2", "darkorchid", "forestgreen", "brown"),
na.value = "white")+
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
ggsave("Outputs/seasonal_diets_dec072024.jpeg", width = 7, height = 6)
library(phyloseq)
library(vegan)
library(tidyverse)
library(ggalluvial)
library(indicspecies)
ggplot(physeq_sankey_PLOTdat,
aes(axis1 = form, axis2 = Species, y = Proportion)) +
geom_alluvium(aes(fill = form), width = 1/10, color = "black", alpha = 0.8) +
geom_stratum(width = 1/10, aes(fill = form), color = "black") +
#  geom_text(stat = "stratum", infer.label = TRUE) +
scale_x_discrete(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(y = "Proportional Read Abundance (%)") +
facet_wrap(.~Season, nrow = 3,  strip.position = "right") +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
legend.position = "bo",
panel.grid.major = element_blank(),  # Remove major gridlines
panel.grid.minor = element_blank()
) +
scale_fill_manual(values = c("gold", "lightyellow2", "darkorchid", "forestgreen", "brown"),
na.value = "white")+
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
ggsave("Outputs/seasonal_diets_dec072024.jpeg", width = 7, height = 6)
## BARPLOT FOR BVN TALK
ggplot(physeq_sankey_PLOTdat,
aes(x = Species, y = Proportion, fill = form)) +
geom_col(color = "black") +
scale_x_discrete(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(y = "Proportional Read Abundance (%)") +
facet_wrap(.~Season, nrow = 3,  strip.position = "right") +
theme_bw() +
theme(
#  axis.text = element_blank(),
#  axis.ticks = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.grid.major = element_blank(),  # Remove major gridlines
panel.grid.minor = element_blank()
) +
scale_fill_manual(values = c("gold", "lightyellow2", "darkorchid", "forestgreen", "brown"),
na.value = "white")+
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
## BARPLOT FOR BVN TALK
ggplot(physeq_sankey_PLOTdat,
aes(x = Species, y = Proportion, fill = form)) +
geom_col(color = "black") +
scale_x_discrete(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(y = "Proportional Read Abundance (%)") +
facet_wrap(.~Season, nrow = 3,  strip.position = "right") +
theme_bw() +
theme(
#  axis.text = element_blank(),
#  axis.ticks = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.grid.major = element_blank(),  # Remove major gridlines
panel.grid.minor = element_blank()
) +
scale_fill_manual(values = c("gold", "lightyellow2", "darkorchid", "forestgreen", "brown"),
na.value = "white")+
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
#Trying to make a SankeyDiagram - this is still janky
spp_data <- physeq_df %>%
group_by(Species) %>%
mutate(Seasonal_samples = n_distinct(Sample)) %>%  # number of unique samples in the season
group_by(Species, form, identity) %>%
summarise(RRA = sum(Abundance)/unique(Seasonal_samples)*100,
Seasonal_samples = unique(Seasonal_samples))
#Trying to make a SankeyDiagram - this is still janky
spp_data <- physeq_df %>%
group_by(Species) %>%
mutate(Seasonal_samples = n_distinct(Sample)) %>%  # number of unique samples in the season
group_by(Species, form, identity) %>%
summarise(RRA = sum(Abundance)/unique(Seasonal_samples)*100,
Seasonal_samples = unique(Seasonal_samples))
spp_data <- spp_data %>%
filter(form != "moss") %>% # moss is a miniscule portion, so ditch it!
mutate(form= if_else(is.na(form), "other", form)) %>%
mutate(Species = if_else(Species == "BighornSheep", "Bighorn Sheep", Species))
spp_data$form = factor(spp_data$form, levels = c("grass", "non-grass graminoid", "forb",
"deciduous shrub/tree",
"coniferous shrub/tree"),
labels = c("Grass", "Non-grass graminoids", "Forbs",
"Deciduous shrubs",
"Coniferous shrubs"))
spp_data$Species = factor(spp_data$Species, levels = rev(c("Bison", "Bighorn Sheep",
"Elk", "Deer", "Goat", "Moose")),
labels = rev(c("Bison", "Bighorn Sheep",
"Elk", "Deer spp.", "Mountain Goat", "Moose")))
spp_data$allszn = "All Seasons"
ggplot(spp_data,
aes(x = Species, fill = form, y = RRA)) +
geom_col(color = "grey20", alpha = 0.8) +
scale_x_discrete(expand = c(0, .55)) +
scale_y_continuous(expand = c(0, 1)) +
labs(y = "Relative Read Abundance (%)", x = NULL) +
theme_bw() +
theme(
axis.ticks = element_blank(),
legend.position = "top",
legend.title = element_blank(),
panel.grid.major = element_blank(),  # Remove major gridlines
panel.grid.minor = element_blank()
) +
scale_fill_manual(values = c("gold", "lightyellow2", "darkorchid", "forestgreen", "brown"),
na.value = "grey90") +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
ggsave("Outputs/all_species_diets_noSeason_feb1662025.jpeg", width = 7.5, height = 5)
######## FOR ALL SPECIES - ignoring season  ############
# get our OTU matrix and our sample metadata
otu_matrix <- as.data.frame(otu_table(physeq_rarefy_rra))
sample_metadata <- sample_data(physeq_rarefy_rra)
# Add taxonomy to the OTU table
otu_with_tax <- cbind(otu_matrix, tax_table(physeq_rarefy_rra))
groups <-sample_metadata$Species # our grouping variable = species
groups <- factor(groups)
####### grouped by functional form
otu_by_form <- otu_with_tax %>%
group_by(form) %>%
summarize(across(where(is.numeric), sum, na.rm = TRUE)) %>%
filter(!is.na(form))
otu_by_form <- t(otu_by_form) # transpose
colnames(otu_by_form) <- otu_by_form[1,] # make labels first row)
######## FOR ALL SPECIES - ignoring season  ############
# get our OTU matrix and our sample metadata
otu_matrix <- as.data.frame(otu_table(physeq_rarefy_rra))
sample_metadata <- sample_data(physeq_rarefy_rra)
# Add taxonomy to the OTU table
otu_with_tax <- cbind(otu_matrix, tax_table(physeq_rarefy_rra))
groups <-sample_metadata$Species # our grouping variable = species
groups <- factor(groups)
####### grouped by functional form
otu_by_form <- otu_with_tax %>%
group_by(form) %>%
summarize(across(where(is.numeric), sum, na.rm = TRUE)) %>%
filter(!is.na(form))
otu_by_form <- t(otu_by_form) # transpose
colnames(otu_by_form) <- otu_by_form[1,] # make labels first row)
otu_by_form <- otu_by_form[-1,] # remove row with labels (character)
otu_by_form <- apply(otu_by_form, 2, as.numeric) # convert to numeric!
form_allszn <- multipatt(otu_by_form, groups, func = "r.g", control = how(nperm=9999))[["sign"]]
physeq_sample <- physeq_df %>%
mutate(Season = if_else(Season == "Fall", "Winter", Season)) %>%
group_by(Species, Season, Sample, form) %>%
summarise(form_rra = sum(Abundance)) %>%
filter(Species != "Moose" & Species != "Goat")
physeq_sample$form <- factor(physeq_sample$form, levels = c("grass", "non-grass graminoid", "forb",
"deciduous shrub/tree", "coniferous shrub/tree", "moss", NA))
physeq_sample$Season <- factor(physeq_sample$Season, levels = c("Winter", "Spring", "Summer"))
ggplot(physeq_sample, aes(x = Season, y = form_rra,  fill = form)) +
geom_boxplot() +
scale_fill_manual(values = c("gold", "lightyellow2", "darkorchid", "forestgreen", "brown", "navy"),
na.value = "grey90") +
facet_wrap(.~Species) + theme_bw()
library(dplyr)
library(ggplot2)
library(phyloseq)
library(vegan)
library(forcats)
library(spaa)
library(tidyverse)
library(here)
library(hilldiv) # for calculating hill numbers!
physeq_rra <- readRDS("banff_diet_phyloseq_cleaned_Dec032024.rds")
library(dplyr)
library(ggplot2)
library(phyloseq)
library(vegan)
library(forcats)
library(spaa)
library(tidyverse)
library(here)
library(hilldiv) # for calculating hill numbers!
physeq_rra <- readRDS("banff_diet_phyloseq_cleaned_Dec032024.rds")
table(sample_data(physeq_rra)$Season)
otu_matrix <- as.data.frame(otu_table(physeq_rra))
sample_metadata <- sample_data(physeq_rra)
# Calculate Hill numbers for each sample RICHNESS
hill_rich <- hilldiv::hill_div(otu_matrix, qvalue = 0)
hill_div <- hilldiv::hill_div(otu_matrix, qvalue = 1)
hill_div_dominant <- hilldiv::hill_div(otu_matrix, qvalue = 2)
# Combine results with sample metadata
hill_rich <- tibble::rownames_to_column(as.data.frame(hill_rich), var = "SampleID") %>%
mutate(metric = "q0") %>% dplyr::select(SampleID, metric, value = "hill_rich")
hill_div <- tibble::rownames_to_column(as.data.frame(hill_div), var = "SampleID")%>%
mutate(metric = "q1") %>% dplyr::select(SampleID, metric, value = "hill_div")
hill_div_dom <- tibble::rownames_to_column(as.data.frame(hill_div_dominant), var = "SampleID")%>%
mutate(metric = "q2") %>% dplyr::select(SampleID, metric, value = "hill_div_dominant")
hill <- rbind(hill_rich, hill_div)
div_metrics <- left_join(hill, sample_metadata,  by = "SampleID") %>%
filter(Season != "Fall") %>%
group_by(Species, metric) %>%
summarise(mean = mean(value),
sd = sd(value),
n = n()) %>%
mutate(ci = 1.95*sd/sqrt(n),
se = sd/sqrt(n)) %>%
mutate(Season = "All Seasons")%>%
mutate(upper_ci = mean + ci,
lower_ci = mean - ci)
div_metrics2 <- left_join(hill, sample_metadata,  by = "SampleID") %>%
filter(Season != "Fall") %>%
filter(Species %in% c("Elk", "Bison", "BighornSheep")) %>%
mutate(group = paste(Species, Season)) %>%
group_by(Species, Season, metric) %>%
summarise(mean = mean(value),
sd = sd(value),
n = n()) %>%
mutate(ci = 1.95*sd/sqrt(n),
se = sd/sqrt(n)) %>%
mutate(upper_ci = mean + ci,
lower_ci = mean - ci)
div_metrics <- rbind(div_metrics, div_metrics2)
div_metrics$Species =factor(div_metrics$Species, levels = c("Bison",
"BighornSheep",    "Elk",  "Goat",  "Deer",  "Moose"),
labels = c("Bison",  "Bighorn Sheep", "Elk", "Mountain Goat", "Deer",  "Moose"))
div_metrics$Season = factor(div_metrics$Season, levels = c("All Seasons",  "Winter", "Spring", "Summer"))
# let's get a lil plot
ggplot(div_metrics, aes(x = Season, y = mean, color = Species, shape = Species, fill = Species)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_col(position = position_dodge(width = 0.5), color = "black",  alpha = 0.5) +
geom_errorbar(aes(ymin = mean - ci, ymax = mean + ci), position = position_dodge(width = 0.5), width = 0.4) +
facet_wrap(.~metric, nrow = 3, scales = "free_y") +
theme_bw() +
ylab("Mean index value per species/season and 95 % C.I.") + xlab(NULL) +
scale_color_manual(values = c("firebrick4",  "orange3", "darkorchid",  "orchid1",  "gold",  "darkorange2")) +
scale_fill_manual(values = c("firebrick4",  "orange3", "darkorchid",  "orchid1",  "gold",  "darkorange2")) +
scale_shape_manual(values = c(16, 16, 15, 15, 17, 17)) +
theme(
legend.title = element_blank(),
panel.grid.major = element_blank(),  # Remove major gridlines
panel.grid.minor = element_blank()
) +
scale_y_continuous(expand = c(0,0))
ggsave("Outputs/all_species_diversity_noSeason_dec072024.jpeg", width = 6, height = 6)
#Trying to make a SankeyDiagram - this is still janky
spp_data <- psmelt(physeq_rra) %>%
group_by(Species) %>%
mutate(Seasonal_samples = n_distinct(Sample)) %>%  # number of unique samples in the season
group_by(Species, identity) %>%
summarise(RRA = sum(Abundance)/unique(Seasonal_samples))
spp_data_wide <- as.data.frame(pivot_wider(spp_data, names_from = Species, values_from = RRA, values_fn = sum))
rownames(spp_data_wide) <- spp_data_wide$identity
spp_data_wide <- spp_data_wide[,-1]
# Calculate Hill numbers for each sample RICHNESS
hill_rich <- hilldiv::hill_div(spp_data_wide, qvalue = 0) # doesn't really make any sense.... lolz .... no surprise there.
hill_div <- hilldiv::hill_div(spp_data_wide, qvalue = 1) # useful!
hill_dominant_div <- hilldiv::hill_div(spp_data_wide, qvalue = 2)
sample_data(physeq_rra)$Species_Season = paste(sample_data(physeq_rra)$Species, sample_data(physeq_rra)$Season)
# subsetting ot season
physeq_rra_core <-subset_samples(physeq_rra, Season != "Fall" & (Species == "Bison" | Species == "BighornSheep" | Species == "Elk"))
bray_dist_core <- phyloseq::distance(physeq_rra_core, method = "bray")
bray_dist <- phyloseq::distance(physeq_rra, method = "bray")
# calculate!!
beta_core <- betadisper(bray_dist_core, group=sample_data(physeq_rra_core)$Species_Season,
bias.adjust = TRUE, type = "centroid")
beta_core
beta_allspp <- betadisper(bray_dist, bias.adjust = TRUE, type = "centroid", group=sample_data(physeq_rra)$Species)
beta_allspp
# YES there are significant differences between groups!!
permutest(beta_core, permutations = how(nperm=999), pairwise = TRUE)
permutest(beta_allspp, permutations = how(nperm=999), pairwise = TRUE)
# but which groups?
tukey_szn <- TukeyHSD(beta_core)[["group"]]
tukey_allspp <- TukeyHSD(beta_allspp)[["group"]]
write.csv(tukey_allspp, "Outputs/intraspecific_diet_dissimilarity_comparisons_tukey.csv")
write.csv(tukey_szn, "Outputs/seasonal_intraspecific_diet_dissimilarity_comparisons_tukey.csv")
# I want a nice little figure showing values across seasons... and species
betaszn <- data.frame(beta_core$group.distances) %>% mutate(group = rownames(.)) %>%
separate(group, c("Species", "Season")) %>% dplyr::select(Species, Season, values = "beta_core.group.distances")
betaall <- data.frame(beta_allspp$group.distances, Season = "All", Species = rownames(beta_allspp$group.distances)) %>%
dplyr::select(Species, Season, values = "beta_allspp.group.distances")
beta <- rbind(betaszn, betaall)
beta$Species =factor(beta$Species, levels = c("Bison",
"BighornSheep",    "Elk",  "Goat",  "Deer",  "Moose"),
labels = c("Bison",  "Bighorn Sheep", "Elk", "Mountain Goat", "Deer",  "Moose"))
beta$Season = factor(beta$Season, levels = c("All",  "Winter", "Spring", "Summer"))
ggplot(beta, aes(x = Season, fill = Species, y = values)) +
geom_col(position = position_dodge(width = 0.8)) +
theme_bw() +
ylab("Mean intraspecific dissimilarity") + xlab(NULL) +
scale_color_manual(values = c("firebrick4",  "orange3", "darkorchid",  "orchid1",  "gold",  "darkorange2")) +
scale_fill_manual(values = c("firebrick4",  "orange3", "darkorchid",  "orchid1",  "gold",  "darkorange2")) +
scale_shape_manual(values = c(16, 16, 15, 15, 17, 17)) +
theme(
legend.title = element_blank(),
panel.grid.major = element_blank(),  # Remove major gridlines
panel.grid.minor = element_blank()
) +
scale_y_continuous(expand = c(0,0))
library(ggplot2)
library(phyloseq)
library(tidyverse)
library(here)
library(vegan)
library(microViz)
library(ggpubr)
library(spaa)
