---
title: "Prelim_Diet_Analysis_Jan302023"
author: "Jonathan Farr"
date: "2023-01-30"
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Reading in packages: 
```{r}
library(dplyr)
library(ggplot2)
library(phyloseq)
library(vegan)
library(NatParksPalettes)
library(forcats)
library(tidyverse)
#library(MiscMetabar)

```


Note: much of the code below is from Bethan Littleford-Colquhoun at Brown University. Thank you Beth!!

Load in our data and convert if to a phyloseq object 
```{r}
# load in our phyloseq object... 
banff_diet <- readRDS("data/BNP_diet_local_global_20241101.rds")

# Load OTU table
otu_mat <- otu_table(banff_diet)

# load taxonomy table
#tax_mat <- data.frame(tax_table(banff_diet))
#tax_mat$identity = rownames(tax_mat)
# need to add in the extra info that I added to the data!! 
#tax_mat_old <- read.csv("data/TAXtable_BNP_diet_local_global_JJF_20241020.csv", sep = ",", row.names = 1) %>%
#  dplyr::select(sequence, form, best_id, alternative_id, common_name)
#tax_mat_all <- merge(tax_mat, tax_mat_old, by="sequence", all.x = T)

# WRITE TO A .CSV TO ADD IN FUNCTIONAL FORM INFORMATION!!! ADD IT IN MANUALLY 
#write.csv(tax_mat_all, "data/TAXtable_BNP_JJF_20241203.csv")

tax_mat_all <- read.csv("data/updated_TAXtable_BNP_JJF_20241203.csv")
rownames(tax_mat_all) <- tax_mat_all$identity 
tax_mat_all <- tax_table(as.matrix(tax_mat_all))



# Load metadata
samples_df <- data.frame(sample_data(banff_diet)) %>%  # 261 samples that were sequences & included in run 
  mutate(SampleID2 = ifelse(Seq.date == "20240726", parse_number(SampleID), SampleID))
# some ugly cleaning as somehow the SampleIDs got a little confused in the last sequencing run 

# read in other metadata on samples --> 338 samples total, including horses, blanks, etc... 
metadata <- read_csv("data/Banff Metadata_Nov102024.csv") %>% 
  dplyr::select(SampleID2 = `SampleID (lab)`, ID_Number, Date, Time, Season, General_Loc, Lat, Long, Species)

#locations$Month = lubridate::month(locations$Date)

meta <- merge(samples_df, metadata, by="SampleID2", all.x= TRUE) %>% dplyr::select(-SampleID2)
row.names(meta) <- meta$SampleID

table(meta$Species, meta$Season)

# Assign each object and create phyloseq
samples = sample_data(meta)

banff_diet <- phyloseq(otu_mat, tax_mat_all, samples)


# Save RDS (phyloseq object)
saveRDS(banff_diet, "banff_diet_phyloseq_Nov102024.rds")

# Load phyloseq object
physeq <- readRDS("banff_diet_phyloseq_Nov102024.rds")
# Take a look at the phlyoseq object
physeq

# Check number of samples, taxa etc.
nsamples(physeq)
ntaxa(physeq)
rank_names(physeq)

sample_names(physeq)[1:5] #displays first 5 sample names
sample_variables(physeq) # shows the colummn headers of the sample_data 
otu_table(physeq)[1:5, 1:5] # shows first 5 rows and 5 columns of otu table
tax_table(physeq)[1:5, 1:5] # shows first 5 rows and 5 columns of taxonomy table

# remove all taxa with fewer than 1000 reads
taxa_total_count <- taxa_sums(physeq)
#taxa_to_keep <- names(taxa_total_count[taxa_total_count > 1000])
#physeq_pruned <- prune_taxa(taxa_to_keep, physeq) # prune --> ONLY for analysis of core diet items

ntaxa(physeq)
#ntaxa(physeq_pruned) # now we only have 162 taxa total! Yaya! See Kartzinel et al. 2015 for rationale 
nsamples(physeq)
sample_sums(physeq)

rm(banff_diet, otu_mat, tax_mat, samples_df, samples, meta, metadata, taxa_to_keep, taxa_total_count)
```


 Next we'll rarefy (resample randomly) the reads in samples to make samples comparable 
```{r}
# Pre-processing the Data:Let's first look at a histogram of the distribution of read depths across samples
hist(sample_sums(physeq), main="Histogram of read depths across samples", xlab="sequencing depth", ylab="number of samples")
sample_sums(physeq) # no issues getting DNA reads from poop - nice!


# We need to remove samples which have a low sequencing depth: Let's look at the lowest read depth of a sample, and then remove samples with a read depth of less than 1000 reads, and then look at how many samples we have retained. 
min(sample_sums(physeq)) #shows lowest number of reads for the samples
#physeq_1000 <- prune_samples(sample_sums(physeq)>=1000, physeq) #pruning samples with reads below 1000
#physeq_1000_pruned <- prune_samples(sample_sums(physeq_pruned)>=1000, physeq_pruned) #pruning samples with reads below 1000

#min(sample_sums(physeq_1000)) #check the pruning was successful  
#nsamples(physeq_1000) #check number of samples again

# We need to rarefy data. Rarefying subsamples the reads of each of the samples to a particular read depth; here we are going to rarefy to the value of the minimum reads per samples we have.

# First, we need to set a seed number to make our results reproducible to anyone else who may use our code
set.seed(12345)

# Rarefy samples. Note: The default parameters of rarefy will involve sampling with replacement, which is not appropriate here. So we set this to 'false' (F).
physeq_rarefy<-rarefy_even_depth(physeq, rngseed=T, replace=F)
#physeq_rarefy_pruned <-rarefy_even_depth(physeq_1000_pruned, rngseed=T, replace=F)

# Double check how many samples and  taxa we now have, and also check that we don't have any zeros in our data (if we did we would have to prune these samples/taxa out)
nsamples(physeq_rarefy) #number of  samples
ntaxa(physeq_rarefy) #number of  taxa --> 624 after pruning 
taxa_sums(physeq_rarefy)
min(sample_sums(physeq_rarefy)) #make sure there are no zeros in minimum read depth!
max(sample_sums(physeq_rarefy))
min(taxa_sums(physeq_rarefy)) #make sure there are no zeros in minimum read depth!

# If there are zero counts, you need to remove them:
physeq_rarefy <- prune_taxa(taxa_sums(physeq_rarefy) > 0, physeq_rarefy) #prune taxa to keep those taxa with a minimum read count of > zero i.e. one and above
#physeq_rarefy_pruned <- prune_taxa(taxa_sums(physeq_rarefy_pruned) > 0, physeq_rarefy_pruned) #prune taxa to keep those taxa with a minimum read count of > zero i.e. one and above

# our full dataset (not RRA)
saveRDS(physeq_rarefy, "banff_diet_phyloseq_cleaned_Dec032024.rds")


rm(physeq, physeq_pruned, physeq_1000, physeq_1000_pruned)
```


This next chunk of code transforms data to relative read abundances (proportional "diet")
```{r}
# If you need to transform sample counts into relative read abundances (always check that this has done the correct transformation and not coverted to RRA across taxa rather than samples)
physeq_rarefy_rra <- transform_sample_counts(physeq_rarefy, function(x) x / sum(x))

sum(physeq_rarefy_rra@otu_table[,100]) # checking to make sure that RRA sums to 1 in a column (make sure this is the correct transformation)

saveRDS(physeq_rarefy_rra, "banff_diet_phyloseq_cleaned_Dec032024.rds")


# for the pruned data (for diet composition analyses)
#physeq_rarefy_rra_pruned <- transform_sample_counts(physeq_rarefy_pruned, function(x) x / sum(x))

#sum(physeq_rarefy_rra_pruned@otu_table[,100]) # checking to make sure that RRA sums to 1 in a column (make sure this is the correct transformation)
#saveRDS(physeq_rarefy_rra_pruned, "outputs/No_Horses/banff_diet_phyloseq_rarefy_RRA_pruned_Nov102024.rds")

```

figuring out how many of our rarefied taxa are ID'ed to species/genus/family
```{r}
tax <- data.frame(tax_table(physeq_rarefy_rra))

# how many plants ID'ed to different resolutions
table(is.na(tax$family_name))
table(is.na(tax$genus_name))
table(is.na(tax$species_name))


```

what is the base-pair length? 
```{r}
tax$bp_length <- str_length(tax$sequence)

summary(tax$bp_length)

table(tax$bp_length)


```


writing a nice little metadata file -- a couple of these for our supplementary files 
```{r}
info <- read.csv("data/supplementary_sample_metadata_pipeline.csv")

meta <- sample_data(readRDS("banff_diet_phyloseq_cleaned_Dec032024.rds"))


sample_metadata <- left_join(info, meta)

write.csv(sample_metadata, "data/Supplementary File 1 - Fecal sample metadata.csv")
```

supplementary OTU file
```{r}
otu <- otu_table(readRDS("banff_diet_phyloseq_cleaned_Dec032024.rds"))


write.csv(otu, "data/Supplementary File 3 - OTU table.csv")

```

supplementary taxonomy data 
```{r}
tax <- data.frame(tax_table(readRDS("banff_diet_phyloseq_cleaned_Dec032024.rds")))
table(is.na(tax$form))

write.csv(tax, "data/Supplementary File 4 - Tax table.csv")

```


